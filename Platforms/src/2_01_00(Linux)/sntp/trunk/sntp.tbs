'***********************************************************************************************************
'			SNTP LIBRARY
'			(Obtains date/time from an NTPv3 server)
'***********************************************************************************************************

include "global.tbh"

'------------------------------------------------------------------------------
const SNTP_STAMP="SNTP> "
const SNTP_CR_LF=chr(13)+chr(10)
const SNTP_STD_SERVER_IP="time.google.com"
const SNTP_STD_SERVER_PORT=123

'------------------------------------------------------------------------------
enum en_sntp_phases 
	SNTP_PHASE_IDLE,
	SNTP_PHASE_CONNECTING,
	SNTP_PHASE_RQUESTING
end enum

'------------------------------------------------------------------------------

declare sub sntp_send_request()
declare function sntp_fmod(w_divident as word, w_divisor as word) as byte
declare function sntp_convert_dates as byte
declare function sntp_convert_to_time(w_MSW as word, w_LSW as word) as byte
declare sub sntp_release_buffer()
declare sub sntp_debug_print_status(status as en_sntp_status_codes)
declare sub sntp_debugprint(byref print_data as string)

'------------------------------------------------------------------------------

dim sntp_lsock as byte
dim sntp_phase as en_sntp_phases
dim sntp_retry_ctr as byte
dim sntp_reply_timer as byte

'------------------------------------------------------------------------------

public dim wYears as word		
public dim wMonthes as word		
public dim wDays as word
public dim wHours as word
public dim wMinutes as word
public dim wSeconds as word

'==============================================================================
public sub sntp_init()
'Initialize the sock for SNTP connection

	sntp_phase=SNTP_PHASE_IDLE
	sntp_lsock=255
end sub

'------------------------------------------------------------------------------
public function sntp_start(byref server_ip as string,server_port as word) as en_sntp_status_codes
'Connect to SNTP Time Server specified by sntp_server_ip, at sntp_server_port.

	sntp_lsock=lsock_get("SNTP")
	sntp_start=SNTP_STATUS_OK
		
	if sntp_lsock>=lsock.numofsock then
		#if SNTP_DEBUG_PRINT
			callback_sntp_failure(SNTP_STATUS_INVALID_SOCKET)
			sntp_debug_print_status(SNTP_STATUS_INVALID_SOCKET)
			sntp_debugprint("---FAILURE---")
		#endif
		sntp_start=SNTP_STATUS_INVALID_SOCKET
		exit function
	end if
	
	if sntp_phase<>SNTP_PHASE_IDLE then
		#if SNTP_DEBUG_PRINT
			sntp_debugprint("Already started")
		#endif
		exit function
	end if

	#if SNTP_DEBUG_PRINT
		sntp_debugprint("---START---")
	#endif

	lsock.num=sntp_lsock
	lsock.protocol=PL_LSOCK_PROTOCOL_UDP

	if server_ip="" then
		lsock.targetip=lsock.getipbyhost(SNTP_STD_SERVER_IP)
	else
		lsock.targetip=lsock.getipbyhost(server_ip)
	end if
	
	if server_port=0 then
		lsock.targetport=SNTP_STD_SERVER_PORT
	else
		lsock.targetport=server_port
	end if

	if sys.freebuffpages<2 then 
		callback_sntp_pre_buffrq(2-sys.freebuffpages)
	end if
	
	lsock.num=sntp_lsock
	lsock.txbuffrq(1)
	lsock.rxbuffrq(1)
	sys.buffalloc
	
	if lsock.rxbuffsize<1 or lsock.txbuffsize<1 then 
		#if SNTP_DEBUG_PRINT
			callback_sntp_failure(SNTP_STATUS_INSUFFICIENT_BUFFER_SPACE)
			sntp_debug_print_status(SNTP_STATUS_INSUFFICIENT_BUFFER_SPACE)
			sntp_debugprint("---FAILURE---")
		#endif	
		sntp_release_buffer()
		sntp_start=SNTP_STATUS_INSUFFICIENT_BUFFER_SPACE
		exit function
	end if

	lsock.num=sntp_lsock

	lsock.close
	lsock.connect
	sntp_phase=SNTP_PHASE_CONNECTING
	sntp_reply_timer=SNTP_REPLY_TIMEOUT
	sntp_retry_ctr=SNTP_RETRY
	
	#if SNTP_DEBUG_PRINT
		sntp_debugprint("Connecting to SNTP server at "+lsock.targetip+":"+str(lsock.targetport))
	#endif
end function

'------------------------------------------------------------------------------
public sub sntp_proc_timer()
	dim w as word
	
	if sntp_reply_timer>0 then
		sntp_reply_timer=sntp_reply_timer-1
		if sntp_reply_timer>0 then
			exit sub
		end if
	end if
	
	select case sntp_phase
	case SNTP_PHASE_IDLE:
		
	case SNTP_PHASE_CONNECTING:
		#if SNTP_DEBUG_PRINT
			callback_sntp_failure(SNTP_STATUS_CONNECTION_TIMEOUT)
			sntp_debug_print_status(SNTP_STATUS_CONNECTION_TIMEOUT)
		#endif		

		sntp_retry_ctr=sntp_retry_ctr-1
		if sntp_retry_ctr=0 then
			goto sntp_failed
		end if

		lsock.num=sntp_lsock
		if lsock.state=PL_LSST_CLOSED then
			lsock.connect
		end if
		sntp_reply_timer=SNTP_REPLY_TIMEOUT
		
		#if SNTP_DEBUG_PRINT
			sntp_debugprint("Connecting to SNTP server at "+lsock.targetip+":"+str(lsock.targetport))
		#endif		

	case SNTP_PHASE_RQUESTING:
		#if SNTP_DEBUG_PRINT
			callback_sntp_failure(SNTP_STATUS_REPLY_TIMEOUT)
			sntp_debug_print_status(SNTP_STATUS_REPLY_TIMEOUT)
		#endif

		sntp_retry_ctr=sntp_retry_ctr-1
		if sntp_retry_ctr=0 then
			goto sntp_failed
		end if

		sntp_send_request()
		sntp_reply_timer=SNTP_REPLY_TIMEOUT
	end select
	exit sub

sntp_failed:
	sntp_release_buffer()
	if sntp_phase=SNTP_PHASE_CONNECTING then
		callback_sntp_failure(SNTP_STATUS_CONNECTION_TIMEOUT)
	else
		callback_sntp_failure(SNTP_STATUS_REPLY_TIMEOUT)
	end if
	sntp_phase=SNTP_PHASE_IDLE

	#if SNTP_DEBUG_PRINT
		sntp_debugprint("---FAILURE---")
	#endif					
end sub

'------------------------------------------------------------------------------
public sub sntp_proc_data()
	dim w_days,w_mins as word
	dim b_seconds as byte
	dim s as string(64)
	dim t4 as string(4)
	dim d4 as dword
	
	if lsock.num<>sntp_lsock then exit sub
	#if SNTP_DEBUG_PRINT
		sntp_debugprint("RX reply")
	#endif

	lsock.num=sntp_lsock
	s=lsock.getdata(255)
	
	if len(s)<>48 then
		#if SNTP_DEBUG_PRINT
			callback_sntp_failure(SNTP_STATUS_REPLY_DATA_ERROR)
			sntp_debug_print_status(SNTP_STATUS_REPLY_DATA_ERROR)
		#endif
		
		sntp_reply_timer=1
		exit sub
	end if
	
	dim w_MSW as word
	dim w_LSW as word
	dim b1 as byte
	dim b2 as byte
	dim b3 as byte
	dim b4 as byte
	
	b1 = asc(mid(s,41,1)) 'the time is in a 4 byte format, (64bits Timestamp format)
	b2 = asc(mid(s,42,1))
	b3 = asc(mid(s,43,1))
	b4 = asc(mid(s,44,1))
	w_MSW = b1 * 256 + b2
	w_LSW = b3 * 256 + b4
	
	sntp_convert_to_time(w_MSW, w_LSW)

	sntp_release_buffer()

	sntp_phase=SNTP_PHASE_IDLE
	
	#if SNTP_DEBUG_PRINT
		s="---OK(" + str(wHours) + ":" + str(wMinutes) + ":" + str(wSeconds) + " " + str(wDays) + "." + str(wMonthes) + "." + str(wYears) + " offset " + str(TIME_ZONE_OFFSET) + ")---"
		sntp_debugprint(s)
	#endif	
	callback_sntp_ok(wHours,wMinutes,wSeconds,wDays,wMonthes,wYears)
end sub

'------------------------------------------------------------------------------
public sub sntp_proc_lsock_event(state as pl_lsock_state)
	if lsock.num<>sntp_lsock then exit sub
	if lsock.state=PL_LSST_EST then
		#if SNTP_DEBUG_PRINT
			sntp_debugprint("Connection established")
		#endif
		sntp_send_request()
		sntp_reply_timer=SNTP_REPLY_TIMEOUT
		sntp_retry_ctr=SNTP_RETRY
		sntp_phase=SNTP_PHASE_RQUESTING
	end if
end sub

'------------------------------------------------------------------------------
sub sntp_send_request()
	dim s as string(48)
	
	s=chr(&h1b)+strgen(47,chr(&h0))

	lsock.setdata(s)
	lsock.send	
	#if SNTP_DEBUG_PRINT
		sntp_debugprint("TX request")
	#endif
end sub

function sntp_fmod(w_divident as word, w_divisor as word) as byte
	dim wTemp as word
	wTemp = w_divident/w_divisor
	sntp_fmod = w_divident - wTemp*w_divisor 
end function

'------------------------------------------------------------------------------------------------------------
function sntp_convert_dates as byte
	dim i as byte 
	dim bLeapYear as byte
	dim wDaysOfAYear as word
	dim wDaysOfAMonth as word
	dim bDone as byte
	bDone = 0
	wYears = 1900				'the base year is 1900
	wMonthes = 1				'the base month is January
	wDaysOfAYear = 365
	wDaysOfAMonth = 31
	do while wDays > 0	' wDaysOfAYear
		if sntp_fmod(wYears,4) = 0 then
			bLeapYear = 1
			wDaysOfAYear = 366
		else
			wDaysOfAYear = 365
			bLeapYear = 0
		end if
		if sntp_fmod(wYears, 100) = 0 then
			wDaysOfAYear = 365
			bLeapYear = 0
		end if
		if sntp_fmod(wYears, 400) = 0 then
			wDaysOfAYear = 366
			bLeapYear = 1
		end if
		
		if wDays >= wDaysOfAYear then
			wYears = wYears + 1
			wDays = wDays - wDaysOfAYear
		else
			goto exit1
		end if
	loop

exit1:
	do while bDone = 0
		select case wMonthes
			case 1,3, 5, 7, 8, 10:
			wDaysOfAMonth = 31
			case 4, 6, 9, 11:
			wDaysOfAMonth = 30
			case 2:
			if bLeapYear = 1 then
				wDaysOfAMonth = 29
			else
				wDaysOfAMonth = 28	
			end if
		end select
		if wDays > wDaysOfAMonth then
			wMonthes = wMonthes + 1
			wDays = wDays - wDaysOfAMonth
		else
			bDone = 1
		end if
	loop
end function

'------------------------------------------------------------------------------------------------------------
function sntp_convert_to_time(w_MSW as word, w_LSW as word) as byte
	dim wRemain as word
	dim wFactor as word
	dim wTemp as word
	dim wTemp1 as word
	dim wTemp2 as word
	dim wTemp3 as word	
	dim i as integer
	dim j as integer
		
	wRemain = 0
	wFactor = 0
	wDays = 0
	wHours = 0
	wMinutes = 0
	wSeconds = 0
	wTemp1 = 0
	wTemp2 = 0
	wTemp3 = 0

	wRemain = sntp_fmod(w_MSW, 24)
	wFactor = w_MSW/24
	wDays = wFactor * 18
	wTemp1 = 0
	 
	for i = 1 to wFactor
		wTemp1 = wTemp1 + 736
		if wTemp1 > 3600 then 
			wDays = wDays + 1
			wTemp1 = wTemp1 - 3600
		end if
	next i 
	for j = 1 to 18
		wTemp2 = wTemp2 + wRemain
		if wTemp2 > 24 then
			wDays = wDays + 1
			wTemp2 = wTemp2 -24
		end if
	next j
	
	'Put wTemp1 into Minus and Seconds
	wTemp3 = wRemain * 736
	wTemp = wTemp1/60
	wMinutes = wTemp * 24
	
	'put wTemp2 into Minus and Seconds
	wSeconds = sntp_fmod(wTemp1, 60) * 24
	wMinutes = wMinutes + wTemp2 * 60
	
	'put wTemp3 into Minus and Seconds
	wMinutes = wMinutes + wTemp3/60
	wSeconds = wSeconds + sntp_fmod(wTemp3, 60) 
	
	'Add w_LSW to minus and seconds
	wMinutes = wMinutes + w_LSW/60
	wSeconds = wSeconds + sntp_fmod(w_LSW , 60)
	
	'redistribute seconds to days.
	wMinutes = wMinutes + wSeconds/60
	wSeconds = sntp_fmod(wSeconds, 60)	
	wHours = wMinutes/60
	
	'Off set the hours according to TIME_ZONE_OFFSET constant, which should be changed by user according the 
	'user's timez zone
	if left(TIME_ZONE_OFFSET,1) = "+" then
		wHours = wHours + val(right(TIME_ZONE_OFFSET,len(TIME_ZONE_OFFSET)-1))
	else
		if left(TIME_ZONE_OFFSET,1) = "-" then
			wHours = wHours + val(right(TIME_ZONE_OFFSET,len(TIME_ZONE_OFFSET)-1))
		end if
	end if	
	
	wMinutes = sntp_fmod(wMinutes, 60)	
	wDays = wDays + wHours/24
	wDays = wDays + 1 			'+1 because it counts start from 1st of January, (that is starting from 1)
	wHours = sntp_fmod(wHours, 24)	
	sntp_convert_dates		'call sntp_convert_dates to calculate the years, and monthes following the leap year rule.	
end function

'------------------------------------------------------------------------------
sub sntp_release_buffer()
	lsock.num=sntp_lsock
	lsock.inconmode=PL_LSOCK_INCONMODE_NONE
	lsock.close
	lsock.txbuffrq(0)
	lsock.rxbuffrq(0)
	sys.buffalloc
end sub

'------------------------------------------------------------------------------
#if SNTP_DEBUG_PRINT
sub sntp_debug_print_status(status as en_sntp_status_codes)
	dim s as string(64)
	
	select case status
	case SNTP_STATUS_INVALID_SOCKET: s="invalid socket ("+str(sntp_lsock)+")"
	case SNTP_STATUS_INSUFFICIENT_BUFFER_SPACE: s="insufficient buffer space"
	case SNTP_STATUS_CONNECTION_TIMEOUT: s="timeout while trying to connect"
	case SNTP_STATUS_REPLY_TIMEOUT: s="timeout while waiting for the reply"
	case SNTP_STATUS_REPLY_DATA_ERROR: s="incoming data is invalid (reply discarded)"
	end select
	s="ERROR: "+s
	sntp_debugprint(s)
end sub
#endif

'------------------------------------------------------------------------------
#if SNTP_DEBUG_PRINT
sub sntp_debugprint(byref print_data as string)

	sys.debugprint(SNTP_STAMP+print_data+SNTP_CR_LF)
end sub
#endif
